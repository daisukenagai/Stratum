---
import * as interfaces from '../../lib/interfaces.ts'
import {
  getPosts,
  getAllPosts,
  getRankedPosts,
  getPostBySlug,
  getPostsByTag,
  getBlock,
  getAllTags,
  getAllBlocksByBlockId,
  downloadFile
} from '../../lib/notion/client.ts'
import {
  getPostLink,
  filePath,
  extractTargetBlocks
} from '../../lib/blog-helpers.ts'
import PostLayout from '../../layouts/PostLayout.astro'
import PostDate from '../../components/PostDate.astro'
import PostTags from '../../components/PostTags.astro'
import PostBody from '../../components/PostBody.astro'
import PostRelativeLink from '../../components/PostRelativeLink.astro'
import BlogPostsLink from '../../components/BlogPostsLink.astro'
import BlogTagsLink from '../../components/BlogTagsLink.astro'
import PostCoverImage from '../../components/PostCoverImage.astro'
import Copyright from '../../components/Copyright.astro'

export async function getStaticPaths() {
  const posts = await getAllPosts()
  return posts.map((post: interfaces.Post) => ({ params: { slug: post.Slug } }))
}

const { slug } = Astro.params

const post = await getPostBySlug(slug)
if (!post) {
  throw new Error('Post not found. slug: ${slug}')
}

const [blocks, allPosts, rankedPosts, recentPosts, tags, postsHavingSameTag] =
  await Promise.all([
    getAllBlocksByBlockId(post.PageId),
    getAllPosts(),
    getRankedPosts(),
    getPosts(5),
    getAllTags(),
    getPostsByTag(post.Tags[0]?.name, 6)
  ])

const fileAtacchedBlocks = extractTargetBlocks('image', blocks)
  .concat(extractTargetBlocks('file', blocks))
  .filter((block) => {
    if (!block) {
      return false
    }
    const imageOrFile = block.Image || block.File
    return imageOrFile && imageOrFile.File && imageOrFile.File.Url
  })

// Download files
await Promise.all(
  fileAtacchedBlocks
    .map(async (block) => {
      const expiryTime = (block.Image || block.File).File.ExpiryTime
      if (Date.parse(expiryTime) > Date.now()) {
        return Promise.resolve(block)
      }
      return getBlock(block.Id)
    })
    .map((promise) =>
      promise.then((block) => {
        let url!: URL
        try {
          url = new URL((block.Image || block.File).File.Url)
        } catch {
          console.log(
            'Invalid file URL: ',
            (block.Image || block.File)?.File?.Url
          )
          return Promise.reject()
        }
        return Promise.resolve(url)
      })
    )
    .map((promise) => promise.then(downloadFile))
)

const currentPostIndex = allPosts.findIndex((post) => post.Slug === slug)
const prevPost = allPosts[currentPostIndex + 1]
const nextPost = allPosts[currentPostIndex - 1]

let ogImage = ''
if (post.FeaturedImage && post.FeaturedImage.Url) {
  ogImage = new URL(filePath(new URL(post.FeaturedImage.Url)), Astro.site)
}
---

<PostLayout
  title={post.Title}
  description={post.Excerpt}
  path={getPostLink(post.Slug)}
  ogImage={ogImage}
  layoutPost={true}
>
  <div slot='main-content' class='space-y-2 md:space-y-8'>
    <PostDate post={post} className='text-slate-500' />
    <PostCoverImage
      post={post}
      widthClass='w-xs md:w-md lg:w-xl '
      textClass='text-5xl text-white'
    />
    <PostBody blocks={blocks} />
  </div>

  <div slot='footer-content'>
    <Copyright />
  </div>

  <div
    slot='aside-content'
    class='grid grid-cols-2 items-center justify-between p-2 text-sm h-full'
  >
    <PostRelativeLink prevPost={prevPost} nextPost={nextPost} />
    <!-- <PostTags post={post} /> -->
  </div>
</PostLayout>

<script>
  import { onMount } from 'solid-js'

  onMount(() => {
    const scrollContainer = document.querySelector('.content-wrapper')

    window.addEventListener('wheel', (e) => {
      scrollContainer.scrollLeft -= e.deltaY
    })
  })
</script>
